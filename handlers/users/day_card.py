import asyncio
import random
from datetime import datetime

from aiogram import Router, F
from aiogram.types import CallbackQuery

from database.db import DataBase
from database.models import UserDailyCard
from keyboards.inline_keyboards.ikb import IKB
from static.const import metaphorical_cards
from static.message_texts import MessageTexts

router = Router()

@router.callback_query(F.data == "day_card")
async def stress_test(callback: CallbackQuery, db: DataBase):
    user_id = callback.from_user.id
    today = datetime.now().date()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = await db.get_from_db(UserDailyCard, filters={"user_id": user_id})
    try:
        if user[0].last_card_date == today:
            await callback.answer("–°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –∫–∞—Ä—Ç—É –¥–Ω—è. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!", show_alert=True)
            return
    except IndexError:
        await db.add_to_db(UserDailyCard(user_id=user_id, last_card_date=datetime.today()))
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
    selected_card = random.choice(metaphorical_cards)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –ë–î
    await db.update_db(UserDailyCard, filters={'user_id': user_id}, update_data={"last_card_date": today})

    await callback.message.delete()
    await callback.message.answer("<b>–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è</b>\n(–ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–∞ –¥–µ–Ω—å)üÉèüëá")
    await callback.message.answer_photo(photo=selected_card)
    await asyncio.sleep(5)
    await callback.message.answer(MessageTexts.main_menu_msg, reply_markup=await IKB.User.get_main_menu())
