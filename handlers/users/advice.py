import asyncio
import random
from datetime import datetime, date

from aiogram import Router, F
from aiogram.types import CallbackQuery

from database.db import DataBase
from database.models import UserDailyCard, UserSubscription, UserSupportCard
from keyboards.inline_keyboards.ikb import IKB
from static.const import metaphorical_cards
from static.message_texts import MessageTexts

router = Router()


@router.callback_query(F.data == "advice_day")
async def daily_advice_handler(callback: CallbackQuery, db: DataBase):
    user_id = callback.from_user.id
    today = datetime.now().date()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –∫–∞—Ä—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sub_data = await db.get_from_db(UserSubscription, filters={"user_id": user_id})
    user_card_data = await db.get_from_db(UserSupportCard, filters={"user_id": user_id})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if user_card_data:
        card_record = user_card_data[0]

        # –î–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        if sub_data and sub_data[0].is_active:
            await send_advice_card(callback, db, user_id, today)
            return

        # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        if card_record.last_card_date == today:
            if card_record.free_uses_today < 2:  # 0, 1, 2 = 3 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                await increment_free_uses(db, card_record)
                await send_advice_card(callback, db, user_id, today)
            else:
                await callback.answer(
                    "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ñ–¥—É –≤–∞—Å –∑–∞–≤—Ç—Ä–∞!",
                    show_alert=True
                )
            return
        else:
            # –ù–æ–≤—ã–π –¥–µ–Ω—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            await db.update_db(
                UserSupportCard,
                filters={'user_id': user_id},
                update_data={
                    "last_card_date": today,
                    "free_uses_today": 0
                }
            )
            await send_advice_card(callback, db, user_id, today)
    else:
        # –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        await db.add_to_db(UserSupportCard(
            user_id=user_id,
            last_card_date=today,
            free_uses_today=0
        ))
        await send_advice_card(callback, db, user_id, today)


async def send_advice_card(callback: CallbackQuery, db: DataBase, user_id: int, today: date):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    selected_card = random.choice(metaphorical_cards)

    await callback.message.delete()
    await callback.message.answer_photo(
        photo=selected_card,
        caption="""<b>1.–ò–Ω–æ–≥–¥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏. –í–æ—Ç –æ–Ω–∞!</b>

1‚É£ <u>–ü—Ä–æ—á—Ç–∏ —Ü–∏—Ç–∞—Ç—É –Ω–∞ –∫–∞—Ä—Ç–µ.</u> 
–ß—Ç–æ –æ–Ω–∞ —Ç–µ–±–µ —Å–µ–π—á–∞—Å –≥–æ–≤–æ—Ä–∏—Ç? –ö–∞–∫–æ–π –≤ –Ω–µ–π —Å–æ–≤–µ—Ç?
2‚É£ <u>–í–≥–ª—è–¥–∏—Å—å –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.</u> 
–ß—Ç–æ –≤ –Ω—ë–º –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è? –ß—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ?

–û—Ç–≤–µ—Ç ‚Äî —É–∂–µ –≤–Ω—É—Ç—Ä–∏. –≠—Ç–∏ –¥–µ—Ç–∞–ª–∏ –∏ –µ—Å—Ç—å —Ç–≤–æ–∏ –∫–ª—é—á–∏ üóùÔ∏è"""
    )
    await asyncio.sleep(5)
    await callback.message.answer(
        MessageTexts.main_menu_msg,
        reply_markup=await IKB.User.get_main_menu()
    )


async def increment_free_uses(db: DataBase, card_record):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"""
    await db.update_db(
        UserSupportCard,
        filters={'id': card_record.id},
        update_data={"free_uses_today": card_record.free_uses_today + 1}
    )