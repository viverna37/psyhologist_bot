from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from config import Config
from database.db import DataBase
from database.models import UserSubscription, Referral, UserBalance
from keyboards.inline_keyboards.ikb import IKB
from states.user_states import BuySubscriptionStates

router = Router()


def calculate_payment(subscription_price: int, user_balance: int) -> dict:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤ –∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å:
    - points_deduction: —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ —Å–ø–∏—à–µ—Ç—Å—è
    - final_price: –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ
    - saved: —Å–∫–æ–ª—å–∫–æ —Å—ç–∫–æ–Ω–æ–º–∏–ª–∏ –±–∞–ª–ª–∞–º–∏
    """
    max_deduction = int(subscription_price * 0.3)
    points_deduction = min(user_balance, max_deduction)

    return {
        "points_deduction": points_deduction,
        "final_price": subscription_price - points_deduction
    }

@router.callback_query(F.data == "cabinet")
async def cabinet(callback: CallbackQuery, db: DataBase):
    sub_data = await db.get_from_db(UserSubscription, filters={"user_id": callback.from_user.id})
    user_balance = await db.get_from_db(UserBalance, filters={"user_id": callback.from_user.id})
    user_balance = user_balance[0].balance
    reff_data = await db.get_from_db(Referral, filters={"referrer_id": callback.from_user.id})
    await callback.message.edit_text(f"""–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
    
<b>üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:</b> {sub_data[0].date_ended if sub_data and sub_data[0].is_active else '–ù–µ—Ç'}
<b>üíé –§–æ—Ä–º–∞—Ç:</b> {"‚ú® –£–ª—É—á—à–µ–Ω–Ω—ã–π" if sub_data and sub_data[0].type_subscription == 1 else "üëë –ü—Ä–µ–º–∏—É–º" if sub_data and sub_data[0].type_subscription == 2 else 'üì¶ –°—Ç–∞–Ω–¥–∞—Ä—Ç'}
<b>üë• –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ –¥—Ä—É–∑—å—è:</b> {len(reff_data)}
<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {user_balance} ‚ÇΩ""", reply_markup = await IKB.User.cabinet_keyboard())

@router.callback_query(F.data == "buy_subscription")
async def cabinet(callback: CallbackQuery, db: DataBase, state=FSMContext):
    user_balance = await db.get_from_db(UserBalance, filters={"user_id": callback.from_user.id})
    user_balance = user_balance[0].balance
    sub_data = await db.get_from_db(UserSubscription, filters={"user_id": callback.from_user.id})
    if sub_data and sub_data[0].type_subscription == 2:
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è", show_alert=True)
        return
    await callback.message.edit_text(f"""–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∫–∏:

üì¶ <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç</b> ‚Äî –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
‚Ä¢ –ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–∞ –¥–µ–Ω—å (–∫–∞—Ä—Ç–∞ –¥–Ω—è)
‚Ä¢ –¢–µ—Å—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞
‚Ä¢ –î–æ 3 –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ —Å–∏—Ç—É–∞—Ü–∏—è—Ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
üí∞ <i>–î–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω–æ</i>

‚ú® <b>–£–ª—É—á—à–µ–Ω–Ω—ã–π</b> ‚Äî –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–µ–µ
‚Ä¢ –í—Å—ë –∏–∑ ¬´—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞¬ª
‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å —É—á—ë—Ç–æ–º –≤–∞—à–µ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ —Å–∏—Ç—É–∞—Ü–∏—è—Ö
‚úÖ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã –≤ –≤–∞—à–µ–º —Ä–∏—Ç–º–µ
üí∞ <i>–î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ {calculate_payment(299, user_balance).get("final_price")} ‚ÇΩ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü</i>

üëë <b>–ü—Ä–µ–º–∏—É–º</b> ‚Äî –¥–ª—è –ª–∏—á–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –í—Å—ë –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ ¬´–£–ª—É—á—à–µ–Ω–Ω—ã–π¬ª
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ —á–∏—Å–ª—É —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º, –¥—Ä—É–∑—å—è–º–∏, –∫–æ–ª–ª–µ–≥–∞–º–∏, –±–ª–∏–∑–∫–∏–º–∏
‚Ä¢ –í—ã —É–≤–∏–¥–∏—Ç–µ, —á–µ—Ä–µ–∑ —á—Ç–æ —Å—Ç—Ä–æ–∏—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç, —á—Ç–æ —Å–±–ª–∏–∂–∞–µ—Ç, –Ω–∞ —á—ë–º –¥–µ—Ä–∂–∏—Ç—Å—è –¥–æ–≤–µ—Ä–∏–µ
‚úÖ –î–ª—è —Ç–µ—Ö, –∫–æ–º—É –≤–∞–∂–Ω–∞ —è—Å–Ω–æ—Å—Ç—å: —á—Ç–æ —ç—Ç–æ –∑–∞ —Å–≤—è–∑—å, –∑–∞—á–µ–º –æ–Ω–∞, –∏ –∫–∞–∫ –µ—ë —Ä–∞–∑–≤–∏–≤–∞—Ç—å
üí∞ <i>–î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ {calculate_payment(399, user_balance).get("final_price")} ‚ÇΩ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü</i>

üîÑ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –°–±–µ—Ä–±–∞–Ω–∫ 
2202200112216658
–ò–º—è: <i>–ï–ª–∏–∑–∞–≤–µ—Ç–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞ –ö.</i>
üì© –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—é–¥–∞
–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.""", reply_markup = await IKB.User.back_to_main_menu_keyboard())
    await state.set_state(BuySubscriptionStates.waiting)
    await state.update_data(price=[calculate_payment(299, user_balance).get("final_price"), calculate_payment(399, user_balance).get("final_price")], points = [calculate_payment(299, user_balance).get("points_deduction"), calculate_payment(399, user_balance).get("points_deduction")])

@router.message(F.photo, StateFilter(BuySubscriptionStates.waiting))
async def cabinet(message: Message, db: DataBase, state: FSMContext, config: Config):
    data = await state.get_data()
    await message.answer("–°–ø–∞—Å–∏–±–æ, —è –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç. –û—Ç–ø—Ä–∞–≤–∏–ª –∞–¥–º–∏–Ω—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", reply_markup = await IKB.User.get_main_menu())
    await message.bot.send_photo(config.tg_bot.order_channel, photo=message.photo[-1].file_id, caption=f"–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂\n–ü–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ —Ü–µ–Ω—ã –±—ã–ª–∏\n{data.get('price')}", reply_markup=await IKB.Admin.check_payment(message.from_user.id, data.get("points")))
    await state.clear()
