import asyncio
from datetime import datetime

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, Message

from database.db import DataBase
from database.models import UserSubscription, User
from keyboards.inline_keyboards.ikb import IKB
from states.user_states import CompatibilityStates
from static.const import compatibility_card
from static.message_texts import MessageTexts

router = Router()


def calculate_compatibility(date1: datetime, date2: datetime) -> int:
    def sum_to_single_digit(n: int) -> int:
        """–°—É–º–º–∏—Ä—É–µ—Ç —Ü–∏—Ñ—Ä—ã —á–∏—Å–ª–∞ –¥–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã"""
        while n > 9:
            n = sum(int(d) for d in str(n))
        return n

    # –°—É–º–º–∏—Ä—É–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ
    day1_sum = sum_to_single_digit(date1.day)
    day2_sum = sum_to_single_digit(date2.day)

    # –û–±—â–∞—è —Å—É–º–º–∞ –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä–µ
    total = day1_sum + day2_sum
    return sum_to_single_digit(total)


@router.callback_query(F.data == "compatibility")
async def compatibility(callback: CallbackQuery, db: DataBase, state: FSMContext):
    sub_data = await db.get_from_db(UserSubscription, filters={"user_id": callback.from_user.id})
    if sub_data and sub_data[0].type_subscription==2:
        await state.set_state(CompatibilityStates.date)
        await callback.message.edit_text('–í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>\n\n<i>* –ì–æ–¥ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª—é–±–æ–π</i>', reply_markup=await IKB.User.back_to_main_menu_keyboard())
    else:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –µ–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ", show_alert=True)

@router.message(F.text, StateFilter(CompatibilityStates.date))
async def ffd(message: Message, db: DataBase, state: FSMContext):
    user_data = await db.get_from_db(User, filters={"user_id": message.from_user.id})
    try:
        result = calculate_compatibility(user_data[0].birthday, datetime.strptime(message.text, "%d.%m.%Y"))
        await state.clear()
        await message.delete()
        await message.answer_photo(photo=compatibility_card.get(result)[0], caption=compatibility_card.get(result)[1])
        await asyncio.sleep(5)
        await message.answer("""–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≥–¥–µ –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å:
‚Äî —á–µ—Ä–µ–∑ —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –≤–∞—à —Å–æ—é–∑
‚Äî –∫ —á–µ–º—É —Å—Ç–æ–∏—Ç —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è
‚Äî –∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ –∏ —Ä–æ—Å—Ç –∑–∞–ª–æ–∂–µ–Ω—ã –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ
<b>üéÅ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –æ—Ç –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
–û–Ω–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –≤–∞—à —Å–æ—é–∑ –ø–æ–¥ –¥—Ä—É–≥–∏–º —É–≥–ª–æ–º –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å, –∫—É–¥–∞ —Å—Ç–æ–∏—Ç –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ.</b>""", reply_markup=await IKB.User.get_main_menu())

        # await message.answer(MessageTexts.main_menu_msg)
    except ValueError:
        await message.edit_text("–í–≤–µ–¥–∏ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")