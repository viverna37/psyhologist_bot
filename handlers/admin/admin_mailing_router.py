import asyncio
from datetime import date, timedelta
from typing import Any

from aiogram import Router, F
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

import os

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram_dialog import StartMode, DialogManager, Window, Dialog
from aiogram_dialog.widgets.input import TextInput, MessageInput
from aiogram_dialog.widgets.kbd import Radio, Button, Back, Row, ManagedRadio, Calendar
from aiogram_dialog.widgets.text import Const, Format
from dotenv import load_dotenv
from sqlalchemy.util import await_fallback

from config import Config
from database.db import DataBase
from database.models import User, UserSubscription, UserBalance
from keyboards.inline_keyboards.ikb import IKB
from states.admin_states import AdminStates

router = Router()


@router.callback_query(F.data.startswith("approve_"))
async def approve(callback: CallbackQuery, db: DataBase):
    user_id = int(callback.data.split("_")[-2])
    type_subscription = int(callback.data.split("_")[-3])
    points = int(callback.data.split("_")[-1])
    user_balance = await db.get_from_db(UserBalance, filters={"user_id": user_id})
    await db.delete_from_db(UserSubscription, filters={"user_id": user_id}, delete_all=True)
    await db.add_to_db(UserSubscription(user_id=user_id, type_subscription=type_subscription,
                                        date_ended=date.today() + timedelta(days=30), is_active=True))
    await db.update_db(UserBalance, filters={'user_id': user_id},
                       update_data={'balance': int(user_balance[0].balance) - points})
    await callback.bot.send_message(user_id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"),
    await callback.message.edit_caption("–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞")
    await callback.message.edit_reply_markup(None)


@router.callback_query(F.data.startswith("review_"))
async def approve(callback: CallbackQuery, db: DataBase, config: Config):
    user_id = int(callback.data.split("_")[1])
    points = int(callback.data.split("_")[2])

    if callback.message.text:
        await callback.message.bot.send_message(
            chat_id=config.tg_bot.review_channel,
            text=callback.message.text
        )
    elif callback.message.voice:
        await callback.message.bot.send_voice(
            chat_id=config.tg_bot.review_channel,
            voice=callback.message.voice.file_id,
            caption=callback.message.caption
        )
    elif callback.message.video_note:
        await callback.message.bot.send_video_note(
            chat_id=config.tg_bot.review_channel,
            video_note=callback.message.video_note.file_id,
        )

    await callback.message.edit_reply_markup(None)

    user_balance = await db.get_from_db(UserBalance, filters={'user_id': user_id})
    print(user_balance)
    await db.update_db(UserBalance, filters={"user_id": user_id},
                       update_data={"balance": int(user_balance[0].balance) + points})

    await callback.bot.send_message(user_id,
                                    f"–í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π, –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤")

@router.callback_query(F.data.startswith("reviewreject_"))
async def approve(callback: CallbackQuery, db: DataBase, config: Config):
    user_id = int(callback.data.split("_")[1])
    await callback.bot.send_message(user_id,"–í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
@router.message(F.text == "/admin")
async def admin(message: Message, config):
    if message.from_user.id in config.tg_bot.admin_ids:
        await message.answer("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                             reply_markup=await IKB.Admin.admin_main_menu())


@router.callback_query(F.data == "admin_back")
async def start_broadcast(callback: CallbackQuery, state: FSMContext, config):
    await state.clear()
    if callback.from_user.id in config.tg_bot.admin_ids:
        await callback.message.edit_text("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                             reply_markup=await IKB.Admin.admin_main_menu())


@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_broadcast_text)
    await callback.message.edit_text(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        "–ü–û–°–õ–ï –ó–ê–ü–£–°–ö–ê –†–ê–°–°–´–õ–ö–ò - –°–û –°–¢–û–†–û–ù–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –ù–ò–ß–ï–ì–û –ù–ê–ñ–ò–ú–ê–¢–¨ –ü–û–ö–ê –ù–ï –ü–†–û–ô–î–ï–¢ –†–ê–°–°–´–õ–ö–ê."
        "–£ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ç–æ–∏—Ç –∫–¥ - 4 —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Å–µ–∫—É–Ω–¥—É, –ø–æ—ç—Ç–æ–º—É –Ω–∞–¥–æ —á—É—É—É—É—Ç—å-—á—É—Ç—å –ø–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –±–æ—Ç –Ω–µ —É–≤–µ–¥–æ–º–∏—Ç, —á—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        # TODO –ü–û–ß–ò–ù–ò–¢–¨ –≠–¢–û
    )


@router.callback_query(F.data == "admin_broadcast_photo")
async def start_broadcast_photo(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_broadcast_image)
    await callback.message.edit_text(
        "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
        "–ü–û–°–õ–ï –ó–ê–ü–£–°–ö–ê –†–ê–°–°–´–õ–ö–ò - –°–û –°–¢–û–†–û–ù–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –ù–ò–ß–ï–ì–û –ù–ê–ñ–ò–ú–ê–¢–¨ –ü–û–ö–ê –ù–ï –ü–†–û–ô–î–ï–¢ –†–ê–°–°–´–õ–ö–ê."
        "–£ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ç–æ–∏—Ç –∫–¥ - 4 —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Å–µ–∫—É–Ω–¥—É, –ø–æ—ç—Ç–æ–º—É –Ω–∞–¥–æ —á—É—É—É—É—Ç—å-—á—É—Ç—å –ø–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –±–æ—Ç –Ω–µ —É–≤–µ–¥–æ–º–∏—Ç, —á—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        # TODO –ü–û–ß–ò–ù–ò–¢–¨ –≠–¢–û
    )


# –†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞
@router.message(AdminStates.waiting_for_broadcast_text)
async def process_broadcast_text(message: Message, state: FSMContext, db: DataBase):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await IKB.Admin.admin_main_menu()
        )
        return

    users = await db.get_from_db(User)
    success = 0
    failed = 0

    status_message = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")

    for user in users:
        try:
            await message.bot.send_message(user.user_id, message.text)
            success += 1
            if success % 5 == 0:
                await status_message.edit_text(
                    f"‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {failed}"
                )
            await asyncio.sleep(0.07)
        except Exception as e:
            failed += 1

    await status_message.edit_text(
        f"""‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚úì –£—Å–ø–µ—à–Ω–æ: {success}
‚ùå –û—à–∏–±–æ–∫: {failed}
üì± –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"""
    )

    await state.clear()
    await message.answer(
        "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await IKB.Admin.admin_main_menu()
    )


# –†–∞—Å—Å—ã–ª–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
@router.message(AdminStates.waiting_for_broadcast_image, F.photo)
async def process_broadcast_image(message: Message, state: FSMContext):
    try:
        await state.update_data(photo_id=message.photo[-1].file_id)
        await state.set_state(AdminStates.waiting_for_broadcast_image_text)
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=InlineKeyboardBuilder().button(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="admin_back"
            ).as_markup()
        )
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")


@router.message(AdminStates.waiting_for_broadcast_image_text)
async def process_broadcast_image_text(message: Message, state: FSMContext, db: DataBase):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await IKB.Admin.admin_main_menu())
        return

    state_data = await state.get_data()
    photo_id = state_data.get('photo_id')

    if not photo_id:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=await IKB.Admin.admin_main_menu()
        )
        await state.clear()
        return

    users = await db.get_from_db(User)
    success = 0
    failed = 0

    status_message = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")

    for user in users:
        try:
            await message.bot.send_photo(
                user.user_id,
                photo=photo_id,
                caption=message.text
            )
            success += 1
            if success % 5 == 0:
                await status_message.edit_text(
                    f"‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {failed}"
                )
            await asyncio.sleep(0.07)
        except Exception as e:
            print(e)
            failed += 1

    await status_message.edit_text(
        f"""‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚úì –£—Å–ø–µ—à–Ω–æ: {success}
‚ùå –û—à–∏–±–æ–∫: {failed}
üì± –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"""
    )

    await state.clear()
    await message.answer(
        "üîî –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        reply_markup=await IKB.Admin.admin_main_menu()
    )


@router.callback_query(F.data == "check_balance")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ tg_id", reply_markup=await IKB.Admin.admin_cancel())
    await state.set_state(AdminStates.waiting_username)

@router.message(AdminStates.waiting_username)
async def process_broadcast_image_text(message: Message, state: FSMContext, db: DataBase):
    await state.clear()
    user_id = message.text
    try:
        user_id = int(user_id)
        user_data = await db.get_from_db(User, filters={"user_id": user_id})
        user_balance = await db.get_from_db(UserBalance, filters={"user_id": user_id})

    except Exception as e:
        user_data = await db.get_from_db(User, filters={"username": user_id})
        user_balance = await db.get_from_db(UserBalance, filters={"user_id": user_data[0].user_id})

    await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data[0].name}: {user_balance[0].balance}\n –±–∞–ª–ª", reply_markup=await IKB.Admin.admin_main_menu())

@router.callback_query(F.data == "minus_balance")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ tg_id", reply_markup=await IKB.Admin.admin_cancel())
    await state.set_state(AdminStates.waiting_username_for_minus)

@router.message(AdminStates.waiting_username_for_minus)
async def process_broadcast_image_text(message: Message, state: FSMContext, db: DataBase):
    await state.set_state(AdminStates.waiting_points)
    user_id = message.text
    try:
        user_id = int(user_id)
        user_data = await db.get_from_db(User, filters={"user_id": user_id})
        user_balance = await db.get_from_db(UserBalance, filters={"user_id": user_id})

    except Exception as e:
        user_data = await db.get_from_db(User, filters={"username": user_id})
        user_balance = await db.get_from_db(UserBalance, filters={"user_id": user_data[0].user_id})

    await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data[0].name}: {user_balance[0].balance}\n –±–∞–ª–ª\n\n–°–∫–æ–ª—å–∫–æ —Å–ø–∏—Å–∞—Ç—å?", reply_markup=await IKB.Admin.admin_cancel())
    await state.update_data(user_id=user_data[0].user_id, user_balance=user_balance[0].balance)

@router.message(AdminStates.waiting_points)
async def process_broadcast_image_text(message: Message, state: FSMContext, db: DataBase):
    data = await state.get_data()
    await state.clear()

    await db.update_db(UserBalance, filters={"user_id": int(data.get("user_id"))}, update_data={"balance": int(data.get("user_balance"))-int(message.text)})

    await message.answer(f"–°–ø–∏—Å–∞–ª {message.text} –±–∞–ª–ª–æ–≤", reply_markup=await IKB.Admin.admin_main_menu())