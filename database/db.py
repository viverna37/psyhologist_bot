from datetime import date

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select, and_, func
from typing import Optional, Dict, List, Union
import asyncio

from config import load_config
config = load_config()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL
DB_CONFIG = {
    "protocol": "postgresql+asyncpg",
    "user": config.db.user,
    "password": config.db.password,
    "host": config.db.host,
    "port": config.db.port,
    "db_name": config.db.database
}



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
protocol = "postgresql+asyncpg"
username = DB_CONFIG.get("user")  # üîπ –õ–æ–≥–∏–Ω –æ—Ç PostgreSQL
password = DB_CONFIG.get("password")  # üîπ –ü–∞—Ä–æ–ª—å –æ—Ç PostgreSQL
server = DB_CONFIG.get("host")    # üîπ –ù–∞–ø—Ä–∏–º–µ—Ä, localhost –∏–ª–∏ IP
port = DB_CONFIG.get("port")              # üîπ –ü–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5432)
database = DB_CONFIG.get("db_name")  # üîπ –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

connection_string = f"{protocol}://{username}:{password}@{server}:{port}/{database}"

# –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
engine = create_async_engine(connection_string)
AsyncSessionLocal = sessionmaker(
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False,
    autoflush=False
)


async def get_db() -> AsyncSession:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–π"""
    async with AsyncSessionLocal() as session:
        yield session

class DataBase:
    @staticmethod
    async def add_to_db(obj):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        async with AsyncSessionLocal() as session:
            try:
                session.add(obj)
                await session.commit()
                await session.refresh(obj)
                return obj
            except Exception as e:
                await session.rollback()
                print(f"Error occurred: {e}")
                return None

    @staticmethod
    async def get_from_db(
            model_class,
            filters: Optional[Dict] = None,
            order_by: Optional[Union[str, List[str]]] = None,
            group_by: Optional[Union[str, List[str]]] = None,
            having: Optional[Dict] = None,
            limit: Optional[int] = None,
            join: Optional[Dict] = None,
            only_fields: Optional[List[str]] = None,
            distinct: bool = False
    ):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        async with AsyncSessionLocal() as session:
            try:
                # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                stmt = select(model_class)

                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                if filters:
                    filter_conditions = []
                    for field, value in filters.items():
                        column_attr = getattr(model_class, field)

                        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –æ–±—ä–µ–∫—Ç date, –∞ –ø–æ–ª–µ –≤ –ë–î ‚Äî datetime
                        if isinstance(value, date):
                            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
                            filter_conditions.append(func.date(column_attr) == value)
                        else:
                            filter_conditions.append(column_attr == value)

                    stmt = stmt.filter(and_(*filter_conditions))

                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                if order_by:
                    if isinstance(order_by, str):
                        order_by = [order_by]

                    for field in order_by:
                        if field.startswith('-'):
                            stmt = stmt.order_by(getattr(model_class, field[1:]).desc())
                        else:
                            stmt = stmt.order_by(getattr(model_class, field))

                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
                if group_by:
                    if isinstance(group_by, str):
                        group_by = [group_by]

                    for field in group_by:
                        stmt = stmt.group_by(getattr(model_class, field))

                # HAVING —É—Å–ª–æ–≤–∏—è
                if having:
                    having_conditions = []
                    for field, value in having.items():
                        having_conditions.append(getattr(model_class, field) == value)
                    stmt = stmt.having(and_(*having_conditions))

                # JOIN
                if join:
                    for join_model, condition in join.items():
                        stmt = stmt.join(join_model, condition)

                # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
                if only_fields:
                    stmt = stmt.with_only_columns(
                        [getattr(model_class, field) for field in only_fields]
                    )

                # DISTINCT
                if distinct:
                    stmt = stmt.distinct()

                # –õ–∏–º–∏—Ç
                if limit:
                    stmt = stmt.limit(limit)

                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
                result = await session.execute(stmt)
                return result.scalars().all()

            except Exception as e:
                print(f"Database error occurred: {e}")
                return None

    @staticmethod
    async def update_db(model_class: object, filters: dict, update_data: dict) -> object:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π"""
        async with AsyncSessionLocal() as session:
            try:
                stmt = select(model_class).filter_by(**filters)
                result = await session.execute(stmt)
                record = result.scalars().first()

                if record:
                    for key, value in update_data.items():
                        setattr(record, key, value)

                    await session.commit()
                    await session.refresh(record)
                    return record
                return None

            except Exception as e:
                await session.rollback()
                print(f"Error occurred: {e}")
                return None

    @staticmethod
    async def delete_from_db(model_class, filters: dict, delete_all: bool = False):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º."""
        async with AsyncSessionLocal() as session:
            try:
                stmt = select(model_class).filter_by(**filters)
                result = await session.execute(stmt)

                if delete_all:
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
                    records = result.scalars().all()
                    for record in records:
                        await session.delete(record)
                    await session.commit()
                    return len(records)
                else:
                    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
                    record = result.scalars().first()
                    if record:
                        await session.delete(record)
                        await session.commit()
                        return 1
                    return 0

            except Exception as e:
                await session.rollback()
                print(f"Error occurred in async delete_from_db: {e}")
                return 0
